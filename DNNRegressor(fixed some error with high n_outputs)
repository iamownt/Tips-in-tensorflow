he_init = tf.variance_scaling_initializer()

from sklearn.base import BaseEstimator, RegressorMixin
from sklearn.exceptions import NotFittedError

class DNNRegressor(BaseEstimator, RegressorMixin):
    def __init__(self, n_hidden_layers=5, n_neurons=100, optimizer_class=tf.train.AdamOptimizer, learning_rate=0.01,
                 batch_size=20, activation=tf.nn.elu, initializer=he_init, batch_norm_momentum=None, dropout_rate=None,
                random_state=None):
        self.n_hidden_layers = n_hidden_layers
        self.n_neurons = n_neurons
        self.optimizer_class = optimizer_class
        self.learning_rate = learning_rate
        self.batch_size = batch_size
        self.activation = activation
        self.initializer = initializer
        self.batch_norm_momentum = batch_norm_momentum
        self.dropout_rate = dropout_rate
        self.random_state = random_state
        self._session = None
    def _dnn(self, inputs):
        for layer in range(self.n_hidden_layers):
            if self.dropout_rate:
                inputs = tf.layers.dropout(inputs, self.dropout_rate, self._training)
            inputs = tf.layers.dense(inputs, self.n_neurons, kernel_initializer=self.initializer, name='hidden%d'%(layer+1))
            if self.batch_norm_momentum:
                input = tf.layers.batch_normalization(inputs, momentum=self.batch_norm_momentum, training=self._training)
            inputs = self.activation(inputs, name='hidden%d_out'%(layer+1))
        return inputs
    def _build_graph(self, n_inputs, n_outputs):
        if self.random_state is not None:
            tf.set_random_seed(self.random_state)
            np.random.seed(self.random_state)
        X = tf.placeholder(tf.float32, [None, n_inputs], name='X')
        if n_outputs > 1:
            y = tf.placeholder(tf.float32, [None, n_outputs], name='y')
        else:
            y = tf.placeholder(tf.float32, [None], name='y')  
        if self.batch_norm_momentum or self.dropout_rate:
            self._training = tf.placeholder_with_default(False, shape=(), name='training')
        else:
            self._training = None
        dnn_outputs = self._dnn(X)
        logits = tf.layers.dense(dnn_outputs, n_outputs, kernel_initializer=self.initializer, name='logits')
        
        error = logits - y
        mse = tf.reduce_mean(tf.square(error))
        rmse = tf.sqrt(mse, name='rmse')
        
        optimizer = self.optimizer_class(learning_rate=self.learning_rate)
        training_op = optimizer.minimize(mse)
        
        init = tf.global_variables_initializer()
        saver = tf.train.Saver()
        
        self._X, self._y = X, y
        self._init, self._saver = init, saver
        self._rmse = rmse
        self._training_op = training_op
        self._logits = logits
    def close_session(self):
        if self._session:
            self._session.close()
    def _get_model_params(self):
        with self._graph.as_default():
            gvars = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)
        return {gvar.op.name:value for gvar, value in zip(gvars, self._session.run(gvars))}
    def _restore_model_params(self, model_params):
        """Set all variables to the given values (for early stopping, faster than loading from disk)"""
        gvar_names = list(model_params.keys())
        assign_ops = {gvar_name: self._graph.get_operation_by_name(gvar_name + "/Assign")
                      for gvar_name in gvar_names}
        init_values = {gvar_name: assign_op.inputs[1] for gvar_name, assign_op in assign_ops.items()}
        feed_dict = {init_values[gvar_name]: model_params[gvar_name] for gvar_name in gvar_names}
        self._session.run(assign_ops, feed_dict=feed_dict)
    def fit(self, X, y, n_epochs=100, X_valid=None, y_valid=None):
        """Fit the model to the training set. If X_valid and y_valid are provided, use early stopping."""
        self.close_session()
        # infer n_inputs and n_outputs from the training set.
        n_inputs = X.shape[1]
        if len(y.shape) == 1:
            n_outputs = 1
        else:
            n_outputs == y.shape[1]
        self._graph = tf.Graph()
        with self._graph.as_default():
            self._build_graph(n_inputs, n_outputs)
            # extra ops for batch normalization
            extra_update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)
        # needed in case of early stopping
        max_epochs_without_progress = 20
        epochs_without_progress = 0
        best_loss = np.infty
        best_params = None
        
        # Now train the model!
        self._session = tf.Session(graph=self._graph)
        with self._session.as_default() as sess:
            self._init.run()
            for epoch in range(n_epochs):
                rnd_idx = np.random.permutation(len(X))
                for rnd_indices in np.array_split(rnd_idx, len(X) // self.batch_size):
                    X_batch, y_batch = X[rnd_indices], y[rnd_indices]
                    feed_dict = {self._X: X_batch, self._y: y_batch}
                    if self._training is not None:
                        feed_dict[self._training] = True
                    sess.run(self._training_op, feed_dict=feed_dict)
                    if extra_update_ops:
                        sess.run(extra_update_ops, feed_dict=feed_dict)
                if X_valid is not None and y_valid is not None:
                    rmse_val = sess.run(self._rmse, feed_dict={self._X: X_valid, self._y: y_valid})
                    rmse_test = sess.run(self._rmse, feed_dict={self._X:X_test, self._y:y_test})
                    if rmse_val < best_loss:
                        best_params = self._get_model_params()
                        best_loss = rmse_val
                        epochs_without_progress = 0
                    else:
                        epochs_without_progress += 1
                    print("{}\tRMSE loss: {:.6f}\tBest loss: {:.6f}\tTest loss:{:.6f}".format(epoch, rmse_val, best_loss, rmse_test))
                    if epochs_without_progress > max_epochs_without_progress:
                        print("Early stopping!")
                        break
                else:
                    rmse_train = sess.run(self._rmse,feed_dict={self._X: X_batch, self._y: y_batch})
                    print("{}\tLast training batch loss: {:.6f}".format(epoch, rmse_train))
            # If we used early stopping then rollback to the best model found
            if best_params:
                self._restore_model_params(best_params)
            return self
        
    def predict(self, X):
        if not self._session:
            raise NotFittedError("This %s instance is not fitted yet" % self.__class__.__name__)
        with self._session.as_default() as sess:
            return self._logits.eval(feed_dict={self._X:X})
        
    def save(self, path):
        self._saver.save(self._session, path)   
